// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UGCalc

// CPUから受け取る値を入れる変数
float constant;
float coefficient;
int list_count;

struct InputBufferData{
    float mass;
    float3 position;
};

struct ResultBufferData{
    float3 force;
};

// CPUに送る結果を格納する変数
RWStructuredBuffer<InputBufferData> InputBuffer;
RWStructuredBuffer<ResultBufferData> ResultBuffer;


[numthreads(1, 1, 1)]
void UGCalc (uint id : SV_DispatchThreadID)
{
    int idx = id.x;

    for (int n = 0; n < list_count; n++)
    {   
        if(idx == n) continue;
        
        // しょっちゅう使うものなのでゆーて負荷重いので保持しておく
        float3 vec = InputBuffer[idx].position - InputBuffer[n].position;
        
        // Get the square of the distance between two points
        float distance = length(vec);
        distance *= distance;

        // Calculate universal gravitation
        float gravity = constant * InputBuffer[idx].mass * InputBuffer[n].mass / distance;

        // Calculate direction vector
        float3 direction = normalize(vec);
        
        // Calculate force and set it
        ResultBuffer[idx].force += gravity * direction * -1 * coefficient;
    }  
}
